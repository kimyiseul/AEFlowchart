// Sketch Plugin: AEFlowchart - Decision (ctrl shift d)
// Source: github.com/tadija/AEFlowchart
// Version: 1.0

#import 'AEFlowchart.js'

/*  call AEFlowchart main function with custom name and shape function  */
createStep("Decision", decisionShape);

function addXYText(newGroup, label, shape) {
  var labelFrame = [label frame],
      shapeFrame = shape.frame();

  // create Y & N
  var textYes = newGroup.addLayerOfType("text"),
      textNo = newGroup.addLayerOfType("text"),
      textYesFrame = [textYes frame];
      textNoFrame = [textNo frame];

  textYes.setName("Y");
  textYes.setStringValue ("Y");
  textYes.textColor = MSColor.colorWithSVGString(labelFontColorBright);

  textNo.setName("N");
  textNo.setStringValue ("N");
  textNo.textColor = MSColor.colorWithSVGString(labelFontColorBright);


  var xYes = [labelFrame midX] + 20,
      yYes = [labelFrame minY] ;

  [textYesFrame setX: xYes];
  [textYesFrame setY: yYes];

  var xNo = [labelFrame midX],
      yNo = [labelFrame minY] + 20;

  [textNoFrame setX: xNo];
  [textNoFrame setY: yNo];

  // Relocate the label
  labelFrame.setY(shapeFrame.minY());
  labelFrame.setX(shapeFrame.midX() - labelFrame.width() - 20);

}

/*  draw decision diamond shape for given label  */
function decisionShape(label)
{
  // get label size
  var labelFrame = [label frame];
  var labelWidth = [labelFrame width];
  var labelHeight = [labelFrame height];

  // set label style
  label.textColor = MSColor.colorWithSVGString(labelFontColor);

  // set shape padding
  var minPadding = 40,
      maxPadding = 40,
      shapeHorizontalPadding = 40,
      shapeVerticalPadding = 40;
  // horizontal
  // var shapeHorizontalPadding = labelWidth * 0.3;
  // if(shapeHorizontalPadding < minPadding) shapeHorizontalPadding = minPadding;
  // if(shapeHorizontalPadding > maxPadding) shapeHorizontalPadding = maxPadding;
  // // vertical
  // var shapeVerticalPadding = labelHeight * 1.3;
  // if(shapeVerticalPadding < minPadding) shapeVerticalPadding = minPadding;
  // if(shapeVerticalPadding > maxPadding) shapeVerticalPadding = maxPadding;

  // create shape path
  var shapePath = [NSBezierPath bezierPath];
  [shapePath moveToPoint:CGPointMake([labelFrame midX], [labelFrame midY] - 40)];
  [shapePath lineToPoint:CGPointMake([labelFrame midX] + 40, [labelFrame midY])];
  [shapePath lineToPoint:CGPointMake([labelFrame midX], [labelFrame midY] + 40)];
  [shapePath lineToPoint:CGPointMake([labelFrame midX] - 40, [labelFrame midY])];
  [shapePath closePath];

  // create shape
  var shape = [MSShapeGroup shapeWithBezierPath: shapePath];

  // set style
  var shapeStyle = [shape style];
  var fills = [shapeStyle fills];
  if([fills count] <= 0) [fills addNewStylePart];
  var shapeFill = [shapeStyle fill];

  // add gradient fill
  shapeFill.fillType = 0;
  shapeFill.color = MSColor.colorWithSVGString("#EC658D");

  return shape;
}


        // this.debugLog("adding text layer")
        // var parent = parent || doc.currentPage(),
        //     name = name || "new text layer",
        //     color = color || "#000000",
        //     // color = [MSColor colorWithHex: color alpha: 1],
        //     color = MSColor.colorWithSVGString(color),
        //     fontSize = fontSize || 14,
        //     string = string || "Type something",
        //     w = w || 400,
        //     h = h || 24,
        //     x = x || 0,
        //     y = y || 0,
        //     fixed = fixed || false; //fixed width

        // var textLayer = parent.addLayerOfType("text");

        //     textLayer.textColor = color;
        //     textLayer.fontSize = fontSize;

        //     textLayer.setName(name);
        //     textLayer.setNameIsFixed(true);
        //     this.setStringValue(textLayer, string);
            
        //     var textLayerFrame = [textLayer frame];
        //     [textLayerFrame setWidth: w];
        //     //[textLayerFrame setHeight: h];
            
        //     [textLayerFrame setX: x];
        //     [textLayerFrame setY: y];

        //     if(fixed){
        //         textLayer.setTextBehaviour(1) // BCTextBehaviourFixedWidth
        //     }

        //     textLayer.setFontPostscriptName('Optima')